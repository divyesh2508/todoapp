/*
 * sonar-scanner-npm
 * Copyright (C) 2022-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyUrlToJavaOptions = exports.getProxyUrl = void 0;

const url_1 = require("url");
const logging_1 = require("./logging");
const types_1 = require("./types");
const DEFAULT_HTTPS_PROXY_PORT = 443;
const DEFAULT_HTTP_PROXY_PORT = 80;
function getProxyUrl(properties) {
    const proxyHost = properties[types_1.ScannerProperty.SonarScannerProxyHost];
    const serverUsesHttps = properties[types_1.ScannerProperty.SonarHostUrl].startsWith('https');
    if (proxyHost) {
        // We assume that the proxy protocol is the same as the endpoint.
        const protocol = serverUsesHttps ? 'https' : 'http';
        const proxyPort = properties[types_1.ScannerProperty.SonarScannerProxyPort] ??
            (serverUsesHttps ? DEFAULT_HTTPS_PROXY_PORT : DEFAULT_HTTP_PROXY_PORT);
        const proxyUser = properties[types_1.ScannerProperty.SonarScannerProxyUser] ?? '';
        const proxyPassword = properties[types_1.ScannerProperty.SonarScannerProxyPassword] ?? '';
        const proxyUrl = new url_1.URL(`${protocol}://${proxyUser}:${proxyPassword}@${proxyHost}:${proxyPort}`);
        (0, logging_1.log)(logging_1.LogLevel.DEBUG, `Detecting proxy: ${proxyUrl}`);
        return proxyUrl;
    }
    else if (properties[types_1.ScannerProperty.SonarScannerProxyPort] ||
        properties[types_1.ScannerProperty.SonarScannerProxyUser] ||
        properties[types_1.ScannerProperty.SonarScannerProxyPassword]) {
        (0, logging_1.log)(logging_1.LogLevel.WARN, `Detecting proxy: Incomplete proxy configuration. Proxy host is missing.`);
    }
    (0, logging_1.log)(logging_1.LogLevel.DEBUG, 'Detecting proxy: No proxy detected');
    return undefined;
}
exports.getProxyUrl = getProxyUrl;
function proxyUrlToJavaOptions(properties) {
    const proxyUrl = getProxyUrl(properties);
    if (!proxyUrl) {
        return [];
    }
    const protocol = properties[types_1.ScannerProperty.SonarHostUrl].startsWith('https') ? 'https' : 'http';
    return [
        `-D${protocol}.proxyHost=${proxyUrl.hostname}`,
        `-D${protocol}.proxyPort=${proxyUrl.port}`,
        `-D${protocol}.proxyUser=${proxyUrl.username}`,
        `-D${protocol}.proxyPassword=${proxyUrl.password}`,
    ];
}
exports.proxyUrlToJavaOptions = proxyUrlToJavaOptions;
